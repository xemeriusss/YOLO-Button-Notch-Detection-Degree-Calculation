# -*- coding: utf-8 -*-
"""buttons_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f1JNbEWk_ze3b5FRaK26MnNLzQAtINXB
"""

!nvidia-smi

import os
HOME = os.getcwd()
print(HOME)

!pip install ultralytics==8.0.196

from IPython import display
display.clear_output()

import ultralytics
ultralytics.checks()

from ultralytics import YOLO

from IPython.display import display, Image

from roboflow import Roboflow
rf = Roboflow(api_key="___")
project = rf.workspace("berry-zykid").project("button-detection-49hul")
version = project.version(4)
dataset = version.download("yolov8")

!yolo task=detect mode=train model=yolov8m.pt data={dataset.location}/data.yaml epochs=40 imgsz=800 plots=True

#%cd {HOME}
Image(filename=f'/content/runs/detect/train5/confusion_matrix.png', width=600)

Image(filename=f'/content/runs/detect/train5/results.png', width=600)

Image(filename=f'/content/runs/detect/train5/val_batch0_pred.jpg', width=600)

Image(filename=f'/content/runs/detect/train5/F1_curve.png', width=600)

Image(filename=f'/content/runs/detect/train5/PR_curve.png', width=600)

# Validate Custom Model

!yolo task=detect mode=val model=/content/runs/detect/train5/weights/best.pt data={dataset.location}/data.yaml

!yolo task=detect mode=predict model=/content/runs/detect/train5/weights/best.pt conf=0.5 source={dataset.location}/test/images save=True

import glob
from IPython.display import Image, display

for image_path in glob.glob(f'/content/runs/detect/predict/*.jpg')[:20]:
      display(Image(filename=image_path, width=600))
      print("\n")

# %cd /content/Button-Detection-1/train/
# !zip -r images.zip images/

# from google.colab import files
# files.download('images.zip')

"""# **Getting cropped button images**"""

!pip install glob2

import os
from PIL import Image
import glob

# Define paths to the images and labels directories
image_dir = '/content/Button-Detection-4/test/images'
label_dir = '/content/Button-Detection-4/test/labels'
output_dir = '/content/Button-Detection-4/cropped_buttons_test'

# Get the list of image files and corresponding label files
image_files = glob.glob(os.path.join(image_dir, '*.jpg'))
label_files = {os.path.basename(file).replace('.txt', ''): file for file in glob.glob(os.path.join(label_dir, '*.txt'))}

# Function to convert YOLO coordinates to PIL crop box (left, upper, right, lower)
def yolo_to_pil(x_center, y_center, width, height, image_width, image_height):
    x_center *= image_width
    y_center *= image_height
    width *= image_width
    height *= image_height
    left = x_center - (width / 2)
    top = y_center - (height / 2)
    right = x_center + (width / 2)
    bottom = y_center + (height / 2)
    return left, top, right, bottom

# Process images and save cropped buttons
cropped_images_info = []

for image_file in image_files:
    # Extract base name without the extension to match the label file
    base_name = os.path.basename(image_file).replace('.jpg', '')
    label_file = label_files.get(base_name)

    if label_file:
        print(f"Processing {image_file}...")

        # Load the image
        original_image = Image.open(image_file)
        image_width, image_height = original_image.size

        # Read labels (coordinates) from the corresponding .txt file
        with open(label_file, 'r') as file:
            labels = file.readlines()

        # Process each bounding box
        for i, label in enumerate(labels):
            print(f"  Processing button {i+1}...")

            # Split the label into components: class, x_center, y_center, width, height
            _, x_center, y_center, width, height = map(float, label.strip().split())

            # Convert YOLO coordinates to PIL crop box
            crop_box = yolo_to_pil(x_center, y_center, width, height, image_width, image_height)

            # Crop the image and save it
            cropped_image = original_image.crop(crop_box)
            cropped_image_path = os.path.join(output_dir, f'{base_name}_button_{i+1}.png')
            cropped_image.save(cropped_image_path)

            # Store info about the cropped image
            cropped_images_info.append({
                'image': base_name + '.jpg',
                'label_file': base_name + '.txt',
                'cropped_image_path': cropped_image_path,
                'coordinates': (x_center, y_center, width, height)
            })

# Print information about processed images
print("\nProcessed images:")
for info in cropped_images_info:
    print(f"  Image: {info['image']}, Label File: {info['label_file']}, Cropped Image: {info['cropped_image_path']}, Coordinates: {info['coordinates']}")

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/Button-Detection-4/
!zip -r cropped_buttons_test.zip cropped_buttons_test/

from google.colab import files
files.download('cropped_buttons_test.zip')

